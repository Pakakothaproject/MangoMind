Perfect ‚Äî you‚Äôre almost there! üëè
Since you already:
‚úÖ created a Google OAuth client in Google Cloud Console,
‚úÖ added its credentials to your Supabase project,
‚úÖ and you‚Äôre using React ‚Äî
you now just need to **trigger Supabase‚Äôs OAuth flow from your frontend** and **add a ‚ÄúSign in with Google‚Äù button** to your login page.

Here‚Äôs a clean step-by-step guide with code üëá

---

## üß© 1. Install Supabase client (if not already)

```bash
npm install @supabase/supabase-js
```

---

## ü™Ñ 2. Initialize Supabase client

Create a file, e.g. `src/lib/supabaseClient.js`:

```js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
```

Make sure these environment variables are set in your `.env`:

```
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-public-key
```

---

## üßë‚Äçüíª 3. Add ‚ÄúLogin with Google‚Äù button in your React page

In your login component, import the client and use `signInWithOAuth`:

```jsx
import React from 'react';
import { supabase } from '../lib/supabaseClient';

function LoginPage() {
  const handleGoogleLogin = async () => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        redirectTo: window.location.origin, // or a specific redirect URL
      },
    });
    if (error) console.error('Error signing in:', error.message);
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h1 className="text-2xl font-semibold mb-6">Welcome</h1>
      <button
        onClick={handleGoogleLogin}
        className="bg-white border border-gray-300 px-4 py-2 rounded flex items-center gap-2 hover:bg-gray-50"
      >
        <img
          src="https://developers.google.com/identity/images/g-logo.png"
          alt="Google logo"
          className="w-5 h-5"
        />
        <span>Sign in with Google</span>
      </button>
    </div>
  );
}

export default LoginPage;
```

‚úÖ This triggers Supabase‚Äôs Google OAuth flow.
‚úÖ After the user authenticates, they‚Äôll be redirected back to your app (to the URL you set in **redirectTo** or Supabase settings).

---

## ‚öôÔ∏è 4. Configure Redirect URLs

Go to **Supabase ‚Üí Authentication ‚Üí URL Configuration**
Add your app URL to **Redirect URLs**, e.g.:

```
http://localhost:5173
https://yourapp.com
```

And also add these URLs in your **Google Cloud Console ‚Üí OAuth client ‚Üí Authorized redirect URIs**:

```
https://<your-project>.supabase.co/auth/v1/callback
```

---

## üéâ 5. Handle Auth State (Optional but recommended)

You can listen for auth changes globally, e.g. in `App.jsx`:

```jsx
import { useEffect, useState } from 'react';
import { supabase } from './lib/supabaseClient';

function App() {
  const [session, setSession] = useState(null);

  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    // initial session check
    supabase.auth.getSession().then(({ data }) => setSession(data.session));

    return () => authListener.subscription.unsubscribe();
  }, []);

  return session ? <Dashboard /> : <LoginPage />;
}
```

---

Would you like me to show you a **version using Supabase UI components (like Auth UI React)** ‚Äî so you get prebuilt ‚ÄúSign in with Google‚Äù buttons automatically styled?
